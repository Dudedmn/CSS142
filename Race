import java.util.Scanner;

/**
 * Core racer class that does all the logical and most of the mathematical calculations to 
 * determine which racer was first. Contains four methods.
 * 
 * timeInput() - Returns a double array based upon user input (which is prompted three times).
 * 
 * sortTimesAscending(double[]) - Sorts an array based upon least to greatest, assumes 
 * that there will only be three elements present (from the three user inputs). Returns
 * a copy of the sorted array.
 * 
 * choice() - Asks whether the user wants to generate another race report using the class
 * RaceReport method writeReport()
 * 
 * raceTimeTies(double, double, double) - Takes three doubles (which are the user inputs) and
 * determines whether there is a first place tie amongst the three racers or a second place 
 * tie. Prints out various scenarios depending on which racers tie.
 *
 * @author (Daniel Yan)
 * @version (December 2nd, 2017)
 */
public class Race
{ 
    
    //This method is public as it is used in the RaceReport class
    /**
     * Precondition: None.
     * Postcondition: Returns an array numArr with 3 user inputted values, unsorted.
     * Description: Using scanner timeInput() takes 3 user inputted values as doubles
     * and corresponds each value to the first three indices in numArr.
       */
    public double[] timeInput(){
        //Creates a new double array with a size of 3 (only 3 user inputs)
            double[] numArr = new double[3];
            Scanner kb = new Scanner(System.in);
            System.out.println("Enter three race times (in seconds):");
            //Takes 3 user inputs and assigns each element of numArr to them
            numArr[0] = kb.nextDouble();
            numArr[1] = kb.nextDouble();
            numArr[2] = kb.nextDouble();
            //This array is not sorted
            return numArr;
            
    }

    //This method is public as it is used in the RaceReport class
    /**
     * Precondition: double[] a has three double values.
     * Postcondition: Returns a copy of double[] sortNum with ascending sorted values.
     * Description: Sorts the values of the three doubles in double[] a and returns a 
     * copy of the sorted array.
       */
    public double[] sortTimesAscending(double[] a){
        //Creates two new arrays, in order to avoid changing the original array
        double[] sortNum = new double[a.length];
        double[] copy = new double [a.length];
        //Initializes several variables for calculations
        double max = 0, min = 0, mid = 0, total = 0;
        //Sorts the three times into max min and mid with the Math library methods
        max = Math.max(Math.max(a[0],a[1]), Math.max(a[1],a[2]));
        min = Math.min(Math.min(a[0], a[1]), Math.min(a[1], a[2]));
        //Calculates mid by taking the total of times - max and min
        total = a[0] + a[1]+ a[2];
        mid = total - max - min;
        //Sets the sorted numbers into the array, from least to greatest
        sortNum[0] = min; sortNum[1] = mid; sortNum[2] = max;
        //Makes a copy of sortNum array
        copy = sortNum.clone();
        //Returns the copy of the sortNum array
        return copy;
        
        
    }
    
    //This method is public as it is used in the RaceReport class
    /**
     * Precondition: None.
     * Postcondition: Reruns the 'race' using writeReport() or exits the program.
     * Description: Asks the user whether they want to enter another 'race' again,
     * runs race.writeReport() if the user wants to do so.
       */
    public void choice() {
         Scanner kb = new Scanner(System.in);
         //Prompts the user whether to enter another race or not
         System.out.println("\nEnter another race? (y/n): ");
            String input = kb.next();
            //Looks whether the user inputs "y" regardless of case 
            if(input.equalsIgnoreCase("y")){
                //Creates a new RaceReport object in order to rewrite a report
                RaceReport race = new RaceReport();
                race.writeReport();
            }
            //Exits the program if the input is not "y" or "Y"
            else {
                System.out.println("Thank you for using the Racing calculator");
                System.exit(0);
            }
    } 

    //This method is public as it is used in the RaceReport class
    /**
     * Precondition: Requires three racer values that are sorted from least to greatest.
     * Postcondition: Prints out various results for ties between the racer values.
     * Description: Takes input of three sorted racer values and determines whether a tie
     * exists, if so the method prints out the number of racers tied and for what place.
       */
    public void raceTimeTies(double first, double second, double third){
        //The numbers that raceTimeTies takes in will already be sorted 
        //As such we do not need to care about third place, as there cannot be a tie for
        //third place
        //Checks to see if all three racers tied
        if(first == second && second == third) {
            System.out.println("Three racers shared first place.");
        }
        //Checks to see if only two racers tied for first place
        if(first == second && second != third || first == third && second != third){
            System.out.println("Two racers shared first place.");
        }
        //Checks to see if only two racers tied for second place
        if(second == third && first != second) {
            System.out.println("Two racers shared second place.");
        }

    }

}
